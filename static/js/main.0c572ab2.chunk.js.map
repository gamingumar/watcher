{"version":3,"sources":["logo.svg","Components/Sunrise.js","App.js","reportWebVitals.js","index.js"],"names":["api","create","baseURL","headers","Accept","Sunrise","useState","loading","setLoading","data","setData","lat","lng","coords","setCoords","_onSuccess","position","latitude","longitude","_onError","_fetchData","a","get","res","ok","results","useEffect","navigator","geolocation","getCurrentPosition","_formatTime","t","date","moment","format","timeData","utc","local","fromNow","style","styles","sunrise","sunset","fontWeight","fontSize","App","datetime","setDatetime","error","timer","setInterval","time","clearTimeout","className","marginTop","src","logo","alt","color","version","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLAAe,MAA0B,iC,+CCcnCA,EAAMC,iBAAO,CACjBC,QAAS,GACTC,QAAS,CAAEC,OAAQ,oCAGRC,EAAU,WAAO,IAAD,EACGC,oBAAS,GADZ,mBACpBC,EADoB,KACXC,EADW,OAGHF,mBAAS,MAHN,mBAGpBG,EAHoB,KAGdC,EAHc,OAKCJ,mBAAS,CACnCK,IAAK,aACLC,IAAK,eAPoB,mBAKpBC,EALoB,KAKZC,EALY,KAUrBC,EAAa,SAACC,GAClB,IAAML,EAAMK,EAASH,OAAOI,SACtBL,EAAMI,EAASH,OAAOK,UAE5BJ,EAAU,CACRH,MACAC,QAGFJ,GAAW,IAGPW,EAAW,WACfX,GAAW,IAIPY,EAAU,uCAAG,4BAAAC,EAAA,sEACDrB,EAAIsB,IAAJ,iDAC4BT,EAAOF,IADnC,gBAC8CE,EAAOD,IADrD,gBADC,QACbW,EADa,QAKTC,IACNd,EAAQa,EAAId,KAAKgB,SANF,2CAAH,qDAuBhB,GAbAC,qBAAU,WACHC,UAAUC,aAIbD,UAAUC,YAAYC,mBAAmBd,EAAYI,KAEtD,IAEHO,qBAAU,WACRN,MACC,CAACP,KAECJ,GAAQF,EACX,OAAO,KAGT,IAAMuB,EAAc,SAACC,GACnB,IAAIC,EAAOC,MAASC,OAAO,SAEvBC,EAAWF,IAAOG,IAAIJ,EAAO,IAAMD,EAAG,oBAAoBM,QAE9D,OAAOF,EAASD,OAAO,OAAhB,YAA8BC,EAASG,UAAvC,MAGT,OACE,gCACE,qBAAIC,MAAOC,EAAX,sBACW,8BAAIV,EAAYrB,EAAKgC,SAArB,UAEX,uBACA,qBAAIF,MAAOC,EAAX,qBACU,4BAAIV,EAAYrB,EAAKiC,iBAM/BF,EAAS,CACbG,WAAY,SACZC,SAAU,sBC5EA3C,iBAAO,CACjBC,QAHc,GAIdC,QAAS,CAAEC,OAAQ,oCA0GNyC,MArGf,WAAgB,IAAD,EACWvC,mBAAS,MADpB,gCAEWA,mBAAS,OAFpB,gCAGWA,mBAAS,OAHpB,gCAKmBA,mBAAS2B,QAL5B,mBAKNa,EALM,KAKIC,EALJ,OAMazC,mBAAS,IANtB,mBAMN0C,EANM,aAQiB1C,oBAAS,IAR1B,mBAQNC,EARM,KAqEb,OArEa,KAUbmB,qBAAU,WACR,IACIuB,EAcJ,OAVAA,EAAQC,aAAY,WAClB,IAAIC,EAAOlB,MACXc,EAAYI,KACX,KAOI,WAELC,aAAaH,MAEd,IAwCD,qBAAKI,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,6BAAKP,EAASZ,OAAO,SACrB,+BACGY,EAASZ,OAAO,MAAO,IACvB3B,GACC,qBACEgC,MAAO,CAAEe,UAAW,EAAGtC,SAAU,YACjCuC,IAAKC,EACLH,UAAU,WACVI,IAAI,SAGR,cAAC,EAAD,OAOF,sBAAMlB,MAAO,CAAEmB,MAAO,OAAtB,SAAgCV,IAEhC,oBAAGT,MAAO,CAAEK,SAAU,IAAtB,uEAC+D,IAC5DE,EAASZ,OAAO,KAFnB,OAE6ByB,aC7GtBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0c572ab2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/*\r\n * File: Sunrise.js\r\n * Project: watcher\r\n * File Created: Thursday, 23rd September 2021 4:05:18 am\r\n * Author: Umar Aamer (umaraamer@gmail.com)\r\n * -----\r\n * Last Modified: Thursday, 23rd September 2021 4:05:18 am\r\n * -----\r\n * Copyright 2020 - 2021 WhileGeek, https://umar.tech\r\n */\r\nimport { create } from \"apisauce\";\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst api = create({\r\n  baseURL: \"\",\r\n  headers: { Accept: \"application/vnd.github.v3+json\" },\r\n});\r\n\r\nexport const Sunrise = () => {\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [data, setData] = useState(null);\r\n\r\n  const [coords, setCoords] = useState({\r\n    lat: \"33.6461432\",\r\n    lng: \"73.0523224\",\r\n  });\r\n\r\n  const _onSuccess = (position) => {\r\n    const lat = position.coords.latitude;\r\n    const lng = position.coords.longitude;\r\n\r\n    setCoords({\r\n      lat,\r\n      lng,\r\n    });\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const _onError = () => {\r\n    setLoading(false);\r\n  };\r\n\r\n  // fetch sunrise / sunset\r\n  const _fetchData = async () => {\r\n    let res = await api.get(\r\n      `http://api.sunrise-sunset.org/json?lat=${coords.lat}&lng=${coords.lng}&date=today`\r\n    );\r\n\r\n    if (res.ok) {\r\n      setData(res.data.results);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!navigator.geolocation) {\r\n      // status.textContent = 'Geolocation is not supported by your browser';\r\n    } else {\r\n      // status.textContent = 'Locatingâ€¦';\r\n      navigator.geolocation.getCurrentPosition(_onSuccess, _onError);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    _fetchData();\r\n  }, [coords]);\r\n\r\n  if (!data || loading) {\r\n    return null;\r\n  }\r\n\r\n  const _formatTime = (t) => {\r\n    let date = moment().format(\"Y-M-D\");\r\n\r\n    let timeData = moment.utc(date + \" \" + t, \"Y-M-D HH:mm:ss:A\").local();\r\n\r\n    return timeData.format(\"LTS\") + ` (${timeData.fromNow()})`;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 style={styles}>\r\n        Sunrise: <b>{_formatTime(data.sunrise)} </b>\r\n      </h2>\r\n      <hr />\r\n      <h2 style={styles}>\r\n        Sunset: <b>{_formatTime(data.sunset)}</b>\r\n      </h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  fontWeight: \"normal\",\r\n  fontSize: \"calc(22px + 1vmin)\",\r\n};\r\n","import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport moment from \"moment\";\r\nimport { version } from \"../package.json\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { create } from \"apisauce\";\r\nimport { GpuBlock } from \"./Components/GpuBlock\";\r\nimport { Sunrise } from \"./Components/Sunrise\";\r\n\r\nconst card1 = \"http://192.168.1.56:4067/summary\";\r\nconst card3 = \"http://192.168.1.56:4069/summary\";\r\nconst card2 = \"http://192.168.1.152:4067/summary\";\r\n\r\n// const card1 = \"http://guac5300.asuscomm.com:3080/summary\";\r\n// const card3 = \"http://guac5300.asuscomm.com:3070/summary\";\r\n// const card2 = \"http://guac5300.asuscomm.com:3071/summary\";\r\n\r\nconst baseURL = \"\";\r\n// define the api\r\nconst api = create({\r\n  baseURL,\r\n  headers: { Accept: \"application/vnd.github.v3+json\" },\r\n});\r\n\r\nconst REFRESH_INTERVAL = 10000;\r\n\r\nfunction App() {\r\n  const [gpu1, setGpu1] = useState(null);\r\n  const [gpu2, setGpu2] = useState(null);\r\n  const [gpu3, setGpu3] = useState(null);\r\n\r\n  const [datetime, setDatetime] = useState(moment());\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    let timer = null;\r\n\r\n    // _getData();\r\n\r\n    timer = setInterval(() => {\r\n      let time = moment();\r\n      setDatetime(time);\r\n    }, 1000);\r\n\r\n    // refresh after few seconds / REFRESH_INTERVAL\r\n    // interval = setInterval(() => {\r\n    //   _getData();\r\n    // }, REFRESH_INTERVAL);\r\n\r\n    return () => {\r\n      // clearTimeout(interval);\r\n      clearTimeout(timer);\r\n    };\r\n  }, []);\r\n\r\n  const _getData = async () => {\r\n    try {\r\n      if (loading) {\r\n        // console.log(\"====================================\");\r\n        // console.log(\"already loading\");\r\n        // console.log(\"====================================\");\r\n        return;\r\n      }\r\n      setLoading(true);\r\n      let res1 = await api.get(card1, {}, { timeout: 5000 });\r\n      let res2 = await api.get(card2, {}, { timeout: 5000 });\r\n      // let res3 = await api.get(card3, {}, { timeout: 5000 });\r\n\r\n      // const [res1, res2, res3] = Promise.all()\r\n\r\n      setGpu1(res1.data);\r\n      setGpu2(res2.data);\r\n      // setGpu3(res3.data);\r\n    } catch (error) {\r\n      console.log(\"ERROR ====================================\");\r\n      console.log(error);\r\n      console.log(\"====================================\");\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if (!gpu1 || !gpu2 || !gpu3) {\r\n  //     if (error === \"\") {\r\n  //       let t = moment();\r\n  //       setError(\"Error Since: \" + t.format(\"LTS\"));\r\n  //     }\r\n  //   } else {\r\n  //     setError(\"\");\r\n  //   }\r\n  // }, [datetime]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>{datetime.format(\"LTS\")}</h1>\r\n        <h3>\r\n          {datetime.format(\"LL\")}{\" \"}\r\n          {loading && (\r\n            <img\r\n              style={{ marginTop: 5, position: \"absolute\" }}\r\n              src={logo}\r\n              className=\"App-logo\"\r\n              alt=\"logo\"\r\n            />\r\n          )}\r\n          <Sunrise />\r\n        </h3>\r\n\r\n        {/* <GpuBlock gpu={gpu1} title=\"RTX 3080-OC\" />\r\n        <GpuBlock gpu={gpu3} title=\"RTX 3070-OC\" />\r\n        <GpuBlock gpu={gpu2} title=\"RTX 3070-EG\" /> */}\r\n\r\n        <code style={{ color: \"red\" }}>{error}</code>\r\n\r\n        <p style={{ fontSize: 12 }}>\r\n          Powered by gamingumar.com | whilegeek.com | umar.tech &copy;{\" \"}\r\n          {datetime.format(\"Y\")} | v{version}\r\n        </p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}