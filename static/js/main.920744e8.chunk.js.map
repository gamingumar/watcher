{"version":3,"sources":["Components/GpuBlock.js","Components/Sunrise.js","App.js","reportWebVitals.js","index.js"],"names":["GpuBlock","gpu","title","gpuInfo","gpus","memory_temperature","temperature","style","marginVertical","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","hashrate","_formatHash","api","create","baseURL","headers","Accept","Sunrise","useState","loading","setLoading","data","setData","lat","lng","coords","setCoords","_onSuccess","position","latitude","longitude","_onError","_fetchData","a","get","res","ok","results","useEffect","navigator","geolocation","getCurrentPosition","_formatTime","t","timeData","moment","utc","local","fromNow","fontWeight","fontSize","sunrise","sunset","App","gpu1","setGpu1","gpu2","setGpu2","gpu3","setGpu3","datetime","setDatetime","error","setError","interval","timer","_getData","setInterval","time","clearTimeout","res1","res2","res3","className","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.920744e8.chunk.js","sourcesContent":["/*\r\n * File: GpuBlock.tsx\r\n * Project: watcher\r\n * File Created: Thursday, 23rd September 2021 3:56:21 am\r\n * Author: Umar Aamer (umaraamer@gmail.com)\r\n * -----\r\n * Last Modified: Thursday, 23rd September 2021 3:56:22 am\r\n * -----\r\n * Copyright 2020 - 2021 WhileGeek, https://umar.tech\r\n */\r\n\r\nexport const GpuBlock = ({ gpu, title }) => {\r\n  const _formatHash = (gpu) => {\r\n    const formatter = new Intl.NumberFormat(\"en-US\", {\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2,\r\n    });\r\n\r\n    return formatter.format(gpu?.hashrate * 0.000001);\r\n  };\r\n\r\n  if (!gpu) {\r\n    return <p>{title} is Offline</p>;\r\n  }\r\n\r\n  const {gpus} = gpu;\r\n\r\n  const gpuInfo = gpus[0]\r\n\r\n  const {memory_temperature, temperature} = gpuInfo;\r\n\r\n  return (\r\n    <>\r\n      <h3 style={{marginVertical: -10}}>\r\n        {title}: {_formatHash(gpu)} Mh/s\r\n        {\" \" + temperature}C \r\n        {\r\n          memory_temperature ? ` [${memory_temperature}C]` : null\r\n        }\r\n      </h3>\r\n     \r\n      \r\n    </>\r\n  );\r\n};","/*\r\n * File: Sunrise.js\r\n * Project: watcher\r\n * File Created: Thursday, 23rd September 2021 4:05:18 am\r\n * Author: Umar Aamer (umaraamer@gmail.com)\r\n * -----\r\n * Last Modified: Thursday, 23rd September 2021 4:05:18 am\r\n * -----\r\n * Copyright 2020 - 2021 WhileGeek, https://umar.tech\r\n */\r\nimport { create } from \"apisauce\";\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst api = create({\r\n  baseURL: \"\",\r\n  headers: { Accept: \"application/vnd.github.v3+json\" },\r\n});\r\n\r\nexport const Sunrise = () => {\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [data, setData] = useState(null)\r\n\r\n  const [coords, setCoords] = useState({\r\n    lat: \"33.6461432\",\r\n    lng: \"73.0523224\",\r\n  });\r\n\r\n  const _onSuccess = (position) => {\r\n    const lat = position.coords.latitude;\r\n    const lng = position.coords.longitude;\r\n\r\n    setCoords({\r\n      lat,\r\n      lng,\r\n    });\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const _onError = () => {\r\n    setLoading(false);\r\n  };\r\n\r\n  // fetch sunrise / sunset\r\n  const _fetchData = async () => {\r\n    let res = await api.get(`http://api.sunrise-sunset.org/json?lat=${coords.lat}&lng=${coords.lng}&date=today`);\r\n\r\n    if (res.ok) {\r\n      setData(res.data.results)\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!navigator.geolocation) {\r\n      // status.textContent = 'Geolocation is not supported by your browser';\r\n    } else {\r\n      // status.textContent = 'Locatingâ€¦';\r\n      navigator.geolocation.getCurrentPosition(_onSuccess, _onError);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    _fetchData()\r\n  }, [coords])\r\n\r\n  if (!data || loading) {\r\n    return null\r\n  }\r\n\r\n  const _formatTime = (t) => {\r\n    let timeData = moment.utc(t, \"HH:mm:ss:A\").local();\r\n\r\n    return timeData.format(\"LTS\") + ` (${timeData.fromNow()})`\r\n  }\r\n\r\n\r\n  return (\r\n      <p style={{fontWeight: \"normal\", fontSize: \"calc(12px + 1vmin)\"}}>\r\n        Sunrise: <b>{_formatTime(data.sunrise)} </b>\r\n        <hr/>\r\n        Sunset: <b>{_formatTime(data.sunset)}</b>\r\n      </p>\r\n  );\r\n};\r\n","// import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport moment from \"moment\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { create } from \"apisauce\";\r\nimport { GpuBlock } from \"./Components/GpuBlock\";\r\nimport { Sunrise } from \"./Components/Sunrise\";\r\n\r\n// const baseURL = \"http://guac5300.asuscomm.com\";\r\nconst baseURL = \"\";\r\n// define the api\r\nconst api = create({\r\n  baseURL,\r\n  headers: { Accept: \"application/vnd.github.v3+json\" },\r\n});\r\n\r\nfunction App() {\r\n  const [gpu1, setGpu1] = useState(null);\r\n  const [gpu2, setGpu2] = useState(null);\r\n  const [gpu3, setGpu3] = useState(null);\r\n\r\n  const [datetime, setDatetime] = useState(moment());\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    let timer = null;\r\n\r\n    _getData();\r\n\r\n    timer = setInterval(() => {\r\n      let time = moment();\r\n      setDatetime(time);\r\n    }, 1000);\r\n\r\n    interval = setInterval(() => {\r\n      _getData();\r\n    }, 5000);\r\n\r\n    return () => {\r\n      clearTimeout(interval);\r\n      clearTimeout(timer);\r\n    };\r\n  }, []);\r\n\r\n  const _getData = async () => {\r\n    let res1 = await api.get(\"http://guac5300.asuscomm.com:3080/summary\");\r\n    let res2 = await api.get(\"http://guac5300.asuscomm.com:3070/summary\");\r\n    let res3 = await api.get(\"http://guac5300.asuscomm.com:3071/summary\");\r\n\r\n    // const [res1, res2, res3] = Promise.all()\r\n\r\n    setGpu1(res1.data);\r\n    setGpu2(res2.data);\r\n    setGpu3(res3.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!gpu1 || !gpu2 || !gpu3) {\r\n      if (error === \"\") {\r\n        let t = moment();\r\n        setError(\"Error Since: \" + t.format(\"LTS\"));\r\n      }\r\n    } else {\r\n      setError(\"\");\r\n    }\r\n  }, [datetime]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>{datetime.format(\"LTS\")}</h1>\r\n        <h6>\r\n          {datetime.format(\"LL\")}\r\n          <Sunrise />\r\n        </h6>\r\n\r\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n\r\n        <GpuBlock gpu={gpu1} title=\"RTX 3080-OC\" />\r\n        <GpuBlock gpu={gpu2} title=\"RTX 3070-EG\" />\r\n        <GpuBlock gpu={gpu3} title=\"RTX 3070-OC\" />\r\n\r\n        <code style={{ color: \"red\" }}>{error}</code>\r\n\r\n        <p style={{ fontSize: 12 }}>\r\n          Powered by gamingumar.com | whilegeek.com | umar.tech &copy;{\" \"}\r\n          {datetime.format(\"Y\")}\r\n        </p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}